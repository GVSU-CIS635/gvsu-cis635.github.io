Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 64, in single_nb_execution
    **kwargs,
  File "/usr/local/lib/python3.7/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.7/site-packages/jupyter_core/utils/__init__.py", line 98, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/local/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.7/site-packages/nbclient/client.py", line 706, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/usr/local/lib/python3.7/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/lib/python3.7/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Creating a DataFrame from a dictionary
vehicle_info = {
    "brand": ["Chevrolet", "BMW", "Audi", "Mercedes"],
    "model": ["Camaro", "3 Series", "A4", "C-Class"],
    "price": [35000, 45000, 37000, 50000]
}
vehicle_df = DataFrame(vehicle_info)
print(f"Vehicle Data:\n{vehicle_df}\n")

# Adding new columns to DataFrame
vehicle_df["year"] = 2020
vehicle_df["dealership"] = ["Speed Motors", "Luxury Drives", "Premium Auto", "Elite Cars"]
print(f"Updated Vehicle Data:\n{vehicle_df}\n")

# Creating DataFrame from a list of tuples
sales_data = [
    (2020, 120, 150),
    (2021, 135, 165),
    (2022, 140, 170)
]
sales_columns = ["Year", "Sedan Sales", "SUV Sales"]
sales_df = DataFrame(sales_data, columns=sales_columns)
print(f"Sales Data:\n{sales_df}\n")

# Creating DataFrame from a numpy ndarray
numpy_data = np.random.rand(4, 2)  # create a 4x2 random matrix
numpy_columns = ["Val1", "Val2"]
numpy_df = DataFrame(numpy_data, columns=numpy_columns)
print(f"Numpy DataFrame:\n{numpy_df}\n")

# Accessing DataFrame elements
print(f"Second column of numpy_df:\n{numpy_df['Val2']}\n")
print(f"Type of the second column: {type(numpy_df['Val2'])}\n")

# Accessing a specific DataFrame row
print("Third row of sales data:")
print(sales_df.iloc[2])
print(f"Type of the third row: {type(sales_df.iloc[2])}\n")

# Accessing a specific element
print(f"Specific element (2nd row, 'model' column) in vehicle_df: {vehicle_df.loc[1, 'model']}\n")

# Slicing a DataFrame
print("Slice of vehicle_df (rows 1 to 2, columns 'model' and 'price'):")
print(vehicle_df.iloc[1:3, 1:3])

# Filtering data based on a condition
print(f"Vehicles with price over $40,000:\n{vehicle_df[vehicle_df.price > 40000]}")

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-3-293015627052>[0m in [0;36m<module>[0;34m[0m
[1;32m      5[0m     [0;34m"price"[0m[0;34m:[0m [0;34m[[0m[0;36m35000[0m[0;34m,[0m [0;36m45000[0m[0;34m,[0m [0;36m37000[0m[0;34m,[0m [0;36m50000[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m      6[0m }
[0;32m----> 7[0;31m [0mvehicle_df[0m [0;34m=[0m [0mDataFrame[0m[0;34m([0m[0mvehicle_info[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      8[0m [0mprint[0m[0;34m([0m[0;34mf"Vehicle Data:\n{vehicle_df}\n"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      9[0m [0;34m[0m[0m

[0;31mNameError[0m: name 'DataFrame' is not defined

